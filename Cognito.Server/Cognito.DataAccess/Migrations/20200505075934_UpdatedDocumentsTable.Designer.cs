// <auto-generated />
using System;
using Cognito.DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cognito.DataAccess.Migrations
{
    [DbContext(typeof(CognitoDbContext))]
    [Migration("20200505075934_UpdatedDocumentsTable")]
    partial class UpdatedDocumentsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cognito.DataAccess.Entities.AccruedTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("AccruedTimes");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DomainId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Contacts","Detail");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeginLine")
                        .HasColumnType("int");

                    b.Property<int?>("BeginPage")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Chrono")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("EndLine")
                        .HasColumnType("int");

                    b.Property<int?>("EndPage")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DetailTypeId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Details","Detail");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.DetailType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DetailTypeSourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("DetailTypeSourceTypeId");

                    b.ToTable("DetailTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DetailTypeSourceTypeId = 1,
                            Label = "Fact"
                        },
                        new
                        {
                            Id = 4,
                            DetailTypeSourceTypeId = 2,
                            Label = "Quote"
                        },
                        new
                        {
                            Id = 5,
                            DetailTypeSourceTypeId = 1,
                            Label = "Summary"
                        },
                        new
                        {
                            Id = 7,
                            DetailTypeSourceTypeId = 2,
                            Label = "Web Reference"
                        },
                        new
                        {
                            Id = 12,
                            DetailTypeSourceTypeId = 1,
                            Label = "Note"
                        },
                        new
                        {
                            Id = 16,
                            DetailTypeSourceTypeId = 2,
                            Label = "Contact Reference"
                        },
                        new
                        {
                            Id = 19,
                            DetailTypeSourceTypeId = 2,
                            Label = "Email"
                        },
                        new
                        {
                            Id = 24,
                            DetailTypeSourceTypeId = 1,
                            Label = "Draft"
                        },
                        new
                        {
                            Id = 25,
                            DetailTypeSourceTypeId = 1,
                            Label = "List"
                        },
                        new
                        {
                            Id = 40,
                            DetailTypeSourceTypeId = 2,
                            Label = "Doc Reference"
                        },
                        new
                        {
                            Id = 41,
                            DetailTypeSourceTypeId = 1,
                            Label = "Phone Call"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.DetailTypeSourceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("DetailTypeSourceTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "User"
                        },
                        new
                        {
                            Id = 2,
                            Label = "System"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Documents","Detail");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("DocumentStatuses","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Completed"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.DomainLicense", b =>
                {
                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Licenses")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("DomainId", "LicenseId");

                    b.HasIndex("LicenseId");

                    b.ToTable("DomainLicenses");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LicenseTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("LicenseTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Time Keeper"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.PointDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.HasKey("DetailId", "PointId");

                    b.HasIndex("PointId");

                    b.ToTable("PointDetails");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientNo")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("ProjectNo")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DomainId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Accrued")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NextDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TimeId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("TimeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Tasks","Task");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Personal"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Billable"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Unbillable"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("States","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = ""
                        },
                        new
                        {
                            Id = 2,
                            Label = ""
                        },
                        new
                        {
                            Id = 3,
                            Label = ""
                        },
                        new
                        {
                            Id = 4,
                            Label = ""
                        },
                        new
                        {
                            Id = 5,
                            Label = ""
                        },
                        new
                        {
                            Id = 6,
                            Label = ""
                        },
                        new
                        {
                            Id = 7,
                            Label = ""
                        },
                        new
                        {
                            Id = 8,
                            Label = ""
                        },
                        new
                        {
                            Id = 9,
                            Label = ""
                        },
                        new
                        {
                            Id = 10,
                            Label = ""
                        },
                        new
                        {
                            Id = 11,
                            Label = ""
                        },
                        new
                        {
                            Id = 12,
                            Label = ""
                        },
                        new
                        {
                            Id = 13,
                            Label = ""
                        },
                        new
                        {
                            Id = 14,
                            Label = ""
                        },
                        new
                        {
                            Id = 15,
                            Label = ""
                        },
                        new
                        {
                            Id = 16,
                            Label = ""
                        },
                        new
                        {
                            Id = 17,
                            Label = ""
                        },
                        new
                        {
                            Id = 18,
                            Label = ""
                        },
                        new
                        {
                            Id = 19,
                            Label = ""
                        },
                        new
                        {
                            Id = 20,
                            Label = ""
                        },
                        new
                        {
                            Id = 21,
                            Label = ""
                        },
                        new
                        {
                            Id = 22,
                            Label = ""
                        },
                        new
                        {
                            Id = 23,
                            Label = ""
                        },
                        new
                        {
                            Id = 24,
                            Label = ""
                        },
                        new
                        {
                            Id = 25,
                            Label = ""
                        },
                        new
                        {
                            Id = 26,
                            Label = ""
                        },
                        new
                        {
                            Id = 27,
                            Label = ""
                        },
                        new
                        {
                            Id = 28,
                            Label = ""
                        },
                        new
                        {
                            Id = 29,
                            Label = ""
                        },
                        new
                        {
                            Id = 30,
                            Label = ""
                        },
                        new
                        {
                            Id = 31,
                            Label = ""
                        },
                        new
                        {
                            Id = 32,
                            Label = ""
                        },
                        new
                        {
                            Id = 33,
                            Label = ""
                        },
                        new
                        {
                            Id = 34,
                            Label = ""
                        },
                        new
                        {
                            Id = 35,
                            Label = ""
                        },
                        new
                        {
                            Id = 36,
                            Label = ""
                        },
                        new
                        {
                            Id = 37,
                            Label = ""
                        },
                        new
                        {
                            Id = 38,
                            Label = ""
                        },
                        new
                        {
                            Id = 39,
                            Label = ""
                        },
                        new
                        {
                            Id = 40,
                            Label = ""
                        },
                        new
                        {
                            Id = 41,
                            Label = ""
                        },
                        new
                        {
                            Id = 42,
                            Label = ""
                        },
                        new
                        {
                            Id = 43,
                            Label = ""
                        },
                        new
                        {
                            Id = 44,
                            Label = ""
                        },
                        new
                        {
                            Id = 45,
                            Label = ""
                        },
                        new
                        {
                            Id = 46,
                            Label = ""
                        },
                        new
                        {
                            Id = 47,
                            Label = ""
                        },
                        new
                        {
                            Id = 48,
                            Label = ""
                        },
                        new
                        {
                            Id = 49,
                            Label = ""
                        },
                        new
                        {
                            Id = 50,
                            Label = ""
                        },
                        new
                        {
                            Id = 51,
                            Label = ""
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.StatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("StatusTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Label = "Pending"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 2,
                            Label = "Unschedule"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 3,
                            Label = "Complete"
                        },
                        new
                        {
                            Id = 14,
                            DisplayOrder = 4,
                            Label = "Archived"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Subtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId", "TaskId")
                        .IsUnique();

                    b.ToTable("Subtasks","Task");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskContact", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("TaskContacts","Task");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskDocument", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("TaskDocuments","Task");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Complete"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Archived"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("TaskTypes","Lookup");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskWebsite", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("WebsiteId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "WebsiteId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("TaskWebsites","Task");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("TenantName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("TimeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeTypeId");

                    b.ToTable("Times","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "12:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Label = "12:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Label = "01:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Label = "01:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Label = "02:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Label = "02:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Label = "03:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Label = "03:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Label = "04:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            Label = "04:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Label = "05:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            Label = "05:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Label = "06:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Label = "06:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            Label = "07:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 16,
                            Label = "07:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            Label = "08:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 18,
                            Label = "08:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 19,
                            Label = "09:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 20,
                            Label = "09:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 21,
                            Label = "10:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 22,
                            Label = "10:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 23,
                            Label = "11:00 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 24,
                            Label = "11:30 AM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 25,
                            Label = "12:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 26,
                            Label = "12:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 27,
                            Label = "01:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 28,
                            Label = "01:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 29,
                            Label = "02:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 30,
                            Label = "02:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 31,
                            Label = "03:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 32,
                            Label = "03:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 33,
                            Label = "04:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 34,
                            Label = "04:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 35,
                            Label = "05:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 36,
                            Label = "05:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 37,
                            Label = "06:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 38,
                            Label = "06:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 39,
                            Label = "07:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 40,
                            Label = "07:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 41,
                            Label = "08:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 42,
                            Label = "08:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 43,
                            Label = "09:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 44,
                            Label = "09:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 45,
                            Label = "10:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 46,
                            Label = "10:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 47,
                            Label = "11:00 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 48,
                            Label = "11:30 PM",
                            TimeTypeId = 1
                        },
                        new
                        {
                            Id = 49,
                            Label = "1-ASAP",
                            TimeTypeId = 2
                        },
                        new
                        {
                            Id = 50,
                            Label = "2-First",
                            TimeTypeId = 2
                        },
                        new
                        {
                            Id = 51,
                            Label = "3-Today",
                            TimeTypeId = 2
                        },
                        new
                        {
                            Id = 52,
                            Label = "4-Later",
                            TimeTypeId = 2
                        },
                        new
                        {
                            Id = 53,
                            Label = "5-Low",
                            TimeTypeId = 2
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TimeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("TimeTypes","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Absolute"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Relative"
                        });
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserDomain", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DomainId", "RoleId");

                    b.HasIndex("DomainId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDomains");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserLogin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider");

                    b.ToTable("AspNetUserLogins","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserProject", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider");

                    b.ToTable("AspNetUserTokens","User");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Websites","dbo");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.AccruedTime", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.ProjectTask", "Task")
                        .WithMany("AccruedTimes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "User")
                        .WithMany("AccruedTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Address", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Contact", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Domain", null)
                        .WithMany("Contacts")
                        .HasForeignKey("DomainId");

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Detail", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.DetailType", "DetailType")
                        .WithMany()
                        .HasForeignKey("DetailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.ProjectTask", "Task")
                        .WithMany("Details")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.DetailType", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.DetailTypeSourceType", "DetailTypeSourceType")
                        .WithMany()
                        .HasForeignKey("DetailTypeSourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Document", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("Documents")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedDocuments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Domain", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Tenant", "Tenant")
                        .WithMany("Domains")
                        .HasForeignKey("TenantId");

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.DomainLicense", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Domain", "Domain")
                        .WithMany("DomainLicenses")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.License", "License")
                        .WithMany("DomainLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.License", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.LicenseType", "LicenseType")
                        .WithMany()
                        .HasForeignKey("LicenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Point", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Point", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Cognito.DataAccess.Entities.Project", "Project")
                        .WithMany("Points")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.PointDetail", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Detail", "Detail")
                        .WithMany("PointDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Point", "Point")
                        .WithMany("PointDetails")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Project", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Domain", "Domain")
                        .WithMany("Projects")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.ProjectTask", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.TaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Time", "Time")
                        .WithMany("Tasks")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.RoleClaim", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Subtask", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.ProjectTask", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskContact", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Contact", "Contact")
                        .WithMany("TaskContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.ProjectTask", "Task")
                        .WithMany("TaskContacts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskDocument", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Document", "Document")
                        .WithMany("TaskDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.ProjectTask", "Task")
                        .WithMany("TaskDocuments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskType", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.TaskWebsite", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.ProjectTask", "Task")
                        .WithMany("TaskWebsites")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Website", "Website")
                        .WithMany("TaskWebsites")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Tenant", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.Time", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.TimeType", "TimeType")
                        .WithMany("Times")
                        .HasForeignKey("TimeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserClaim", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserDomain", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Domain", "Domain")
                        .WithMany("UserDomains")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "User")
                        .WithMany("UserDomains")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserLogin", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserProject", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserRole", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cognito.DataAccess.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cognito.DataAccess.Entities.UserToken", b =>
                {
                    b.HasOne("Cognito.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
